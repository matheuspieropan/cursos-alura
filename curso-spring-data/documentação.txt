Para executar um like (e não um equals, como no exemplo), use:
List<Funcionario> findByNomeLike(String nome);


O valor do parâmetro nome deve usar o pattern, por exemplo:
String nome = "%maria%";


Você também pode buscar os funcionários pelo prefixo ou sufixo:

List<Funcionario> findByNomeEndingWith(String nome)
Ou:

List<Funcionario> findByNomeStartingWith(String nome)
Null e not Null
Igualmente podemos pesquisar elemento nulos ou não nulos:

List<Funcionario> findByNomeIsNull()
Ou não nulos com:

List<Funcionario> findByNomeIsNotNull()
Ordenação
Ainda vamos falar sobre ordenação e páginas, mas claro que a Derived Query pode dar suporte:

List<Funcionario> findByNomeOrderByNomeAsc(String nome)



Agora imagina se precisa pesquisar pela descrição mas da UnidadeTrabalho. A primeira ideia seria usar o nome findByUnidadeTrabalhosDescricao(String descricao) como discutimos.

No entanto temos o problema que o nome da entidade UnidadeTrabalho é composto de duas palavras. Para separar claramente o nome da entidade do atributo devemos usar o caracter _. Veja a assinatura do método então:

List<Funcionario> findByUnidadeTrabalhos_Descricao(String descricao);

@Query("SELECT f FROM Funcionario f JOIN f.unidadeTrabalhos u WHERE u.descricao = :descricao")
List<Funcionario> findByUnidadeTrabalhos_Descricao(String descricao);